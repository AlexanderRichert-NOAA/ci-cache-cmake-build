name: 'ci-cache-cmake-build'
description: 'Restore cached CMake build directory (populated separately) and optimize rebuilds by selectively updating timestamps'

inputs:
  source-dir:
    description: 'Source code directory, relative to github.workspace (must be same as reference source dir name so CMake can use it)'
    required: false
    default: '.'
  build-dir:
    description: 'CMake build directory, relative to github.workspace'
    required: false
    default: 'build'
  cache-key-prefix:
    description: 'Cache key prefix'
    required: false
    default: 'cmake-build-cache'
  config-args:
    description: 'Additional config arguments (passed to initial CMake invocation)'
    required: false
    default: ''
  build-args:
    description: 'Additional build arguments (passed to build tool like make or ninja)'
    required: false
    default: ''
  force-reconfigure:
    description: 'Force CMake reconfiguration even if cache exists'
    required: false
    default: 'false'
  parent-org:
    description: 'GitHub org with reference repo/branch'
    required: false
    default: 'NOAA-EMC'
  reference-branch:
    description: 'Name of reference branch'
    required: false
    default: 'develop'
  build-system:
    description: 'Build "Unix Makefiles" or "Ninja"'
    choice:
    - "Unix Makefiles"
    - "Ninja"
    default: "Ninja"

runs:
  using: "composite"
  steps:
    - name: Get reference branch ref
      id: get-reference-ref
      shell: bash
      run: |
        echo "Getting reference branch ref..."
        cd ${{ inputs.source-dir }}
        git remote add reference https://github.com/${{ inputs.parent-org }}/${{ github.event.repository.name }}
        # Fetch reference branch info without checking it out
        git fetch reference ${{ inputs.reference-branch }} --depth=1 || echo "Develop branch not found, using default cache key"
        
        # Get reference HEAD commit hash
        REFERENCE_SHA=$(git rev-parse reference/${{ inputs.reference-branch }})
        echo "Found ${{ inputs.reference-branch }} branch HEAD: $REFERENCE_SHA"
        
        # Set the cache key based on reference branch's HEAD
        echo "REFERENCE_SHA=$REFERENCE_SHA" >> $GITHUB_ENV
        echo "CACHE_KEY=${{ inputs.cache-key-prefix }}-${{ inputs.reference-branch }}-$REFERENCE_SHA" >> $GITHUB_ENV

    - name: Restore build cache
      id: restore-cache
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ inputs.build-dir }}
          reference-manifest.txt
        key: ${{ env.CACHE_KEY }}
        restore-keys: ${{ env.CACHE_KEY }}

    - name: Create file manifest for modified code
      if: steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        echo "Cache hit from reference branch. Processing file changes..."

        echo "Generating manifest of git-controlled files..."
        
        # Create a manifest file of all git-tracked files with their hashes
        manifest_file="${GITHUB_WORKSPACE}/current-manifest.txt"
        > "$manifest_file"

        # Get all git-tracked files and calculate their hashes
        cd ${{ inputs.source-dir }}
        git ls-files --recurse-submodules | while read -r file; do
          # Skip files in the build directory
          if [[ "$file" != "${{ inputs.build-dir }}/"* && -f "$file" ]]; then
            # Calculate file hash
            file_hash=$(git hash-object "$file")
            # Store in manifest with pipe separator
            echo "$file|$file_hash" >> "$manifest_file"
          fi
        done
        
        # Sort manifest for consistent comparison
        sort -o "$manifest_file" "$manifest_file"
        echo "Created source manifest with $(wc -l < "$manifest_file") git-controlled files"

        reference_manifest="${GITHUB_WORKSPACE}/reference-manifest.txt"

        # Init mod times in modified code to 1 Jan 1970:
        find ${GITHUB_WORKSPACE}/${{ inputs.source-dir }} | xargs -I{} touch -t 197001010000 {}
        # Find changed files and update their timestamps
        curr_manifest="${GITHUB_WORKSPACE}/current-manifest.txt"
        while IFS='|' read -r file hash; do
          # Check if file exists with same hash in previous manifest
          if ! grep -q "^$file|$hash$" "$reference_manifest"; then
            # Update file's modification time to trigger rebuild
            touch -m "${GITHUB_WORKSPACE}/${{ inputs.source-dir }}/$file"
            echo "Found modified file (updated timestamp): $file"
          fi
        done < "$curr_manifest"

    - name: Report cache miss
      if: steps.restore-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "::warning::No cache hit found for reference branch (${{ inputs.reference-branch }}/${{ env.REFERENCE_SHA }})"
        echo "::warning::The CMake project will be rebuilt from scratch."

    - name: Build with CMake
      shell: bash
      run: |
        echo "Building with CMake using restored cache..."
        #cmake -G "${{ inputs.build-system }}" -S ${{ inputs.source-dir }} -B ${{ inputs.build-dir }} ${{ inputs.config-args }}
        cmake --build ${{ inputs.build-dir }} --parallel 2 --verbose ${{ inputs.build-args }}
        echo "Build completed successfully"
